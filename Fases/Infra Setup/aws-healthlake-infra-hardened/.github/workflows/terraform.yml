name: terraform-ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write       # OIDC to AWS
  contents: read
  security-events: write

env:
  TF_VERSION: '1.7.5'
  AWS_REGION: 'eu-west-2'

jobs:
  validate-plan:
    name: Validate & Plan (matrix envs)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [ "nonprod", "prod" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt
        run: terraform -chdir=environments/${{ matrix.env }} fmt -check

      - name: Terraform init
        run: terraform -chdir=environments/${{ matrix.env }} init -upgrade

      - name: Terraform validate
        run: terraform -chdir=environments/${{ matrix.env }} validate

      - name: Terraform plan
        run: terraform -chdir=environments/${{ matrix.env }} plan -out=tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: environments/${{ matrix.env }}/tfplan

  security:
    name: IaC Security (tfsec + checkov + trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: sarif
          sarif_file: tfsec.sarif
          args: --minimum-severity LOW --soft-fail=false
      - name: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: sarif
          output_file_path: checkov.sarif
          framework: terraform
          soft_fail: false
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif

      - name: Upload SARIF to Code Scanning (Checkov)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

      - name: Trivy (IaC config scan)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          output: 'trivy-config.sarif'
          exit-code: '1'
          ignore-unfixed: true

      - name: Trivy (Filesystem vuln & secrets)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scanners: 'vuln,secret,misconfig'
          hide-progress: true
          format: 'sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          output: 'trivy-fs.sarif'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload SARIF to Code Scanning (Trivy config)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config.sarif

      - name: Upload SARIF to Code Scanning (Trivy fs)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  apply:
    name: Apply (manual approval via environments)
    runs-on: ubuntu-latest
    needs: [validate-plan, security]
    if: github.ref == 'refs/heads/main'
    environment: production  # protect with required reviewers
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init (prod)
        run: terraform -chdir=environments/prod init -upgrade

      - name: Terraform apply (prod)
        run: terraform -chdir=environments/prod apply -auto-approve tfplan || terraform -chdir=environments/prod apply -auto-approve